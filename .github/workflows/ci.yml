name: CI do MeuTurno

# Define quando o workflow deve ser executado
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job para validar o Backend
  validate-backend:
    name: "Backend: Build & Test"
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./api/backend

    steps:
    - name: 1. Baixar o código do repositório
      uses: actions/checkout@v4

    - name: 2. Configurar o Java (JDK)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: 3. Buildar e Testar com Maven (e gerar relatório de cobertura)
      run: mvn -B clean install

    # Relatório de cobertura para o Codecov
    - name: 4. Upload da cobertura para o Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./api/target/site/jacoco/
        fail_ci_if_error: true

  # Job para validar o Frontend
  validate-frontend:
    name: "Frontend: Build & Test"
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./ui

    steps:
    - name: 1. Baixar o código do repositório
      uses: actions/checkout@v4

    - name: 2. Configurar o Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: 3. Instalar dependências
      run: npm ci

    - name: 4. Buildar o projeto
      run: npm run build

    - name: 5. Rodar testes (se houver)
      run: npm run test -- --no-watch --browsers=ChromeHeadless

  # Job para segurança com Snyk
  security-scan-snyk:
    name: "Security Scan (Snyk)"
    runs-on: ubuntu-latest
    needs: [validate-backend, validate-frontend] 

    steps:
    - name: Baixar o código do repositório
      uses: actions/checkout@v4

    - name: Instalar o Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Scan de Dependências (SCA) com Snyk
      run: snyk test --all-projects --fail-on=all
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Scan de Código (SAST) com Snyk
      run: snyk code test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
